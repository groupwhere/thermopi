#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.7
# In conjunction with Tcl version 8.5
#    Apr 22, 2016 04:52:52 PM
import sys
from thermogui_support import *

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.config(cursor='none')
    # Production - no title bar
    root.overrideredirect(1)
    top = thermoGUI(root)
    root.resizable(0,0)
    root.after(0, top.timer)
    root.after(0, top.change_color)
    root.mainloop()

w = None
def create_thermoGUI(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = thermoGUI (w)
    return (w, top)

def destroy_thermoGUI():
    global w
    w.destroy()
    w = None

class thermoGUI:
    def __init__(self, top=None):
        global guischedule
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        #_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        #_fgcolor = '#000000'  # X11 color: 'black'
        #_compcolor = '#d9d9d9' # X11 color: 'gray85'
        #_ana1color = '#d9d9d9' # X11 color: 'gray85'
        #_ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.font14 = "-family Cantarell -size 14 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"
        self.font12 = "-family Cantarell -size 12 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.font10 = "-family Cantarell -size 10 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.font08 = "-family Cantarell -size 8 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"

        self.bigFont      = "-family Helvetica -size 26 -weight bold"
        self.largeFont    = "-family Helvetica -size 28 -weight bold"
        self.weatherFont  = "-family Helvetica -size 10 -weight bold"
        self.scheduleFont = "-family Helvetica -size 8 -weight bold"

        #top.geometry("480x320+613+231")
        top.geometry("480x320")
        top.title("ThermoPi")
        top.configure(background="#000000")
        top.configure(highlightcolor="black")

        # Form vars
        self.humidityf   = StringVar()
        self.targetTempf = StringVar()
        self.indoorTempf = StringVar()
        self.newmode     = StringVar()
        self.obStringf   = StringVar()
        self.heatStringf = StringVar()
        self.coolStringf = StringVar()
        self.fanStringf  = StringVar()
        self.idleStringf = StringVar()
        self.Weatherf    = StringVar()
        self.scheduleStatf = StringVar()
        self.scheddisF   = StringVar()
        self.schedresF   = StringVar()
        self.whatsOn = StringVar()
        self.newTargetTemp = StringVar()
        self.weatherF = StringVar()
        self.nnamef = StringVar()
        self.nlowf  = StringVar()
        self.nhighf = StringVar()

        # For keyboard
        self.display = StringVar()
        self.keyresult = StringVar()

        # For timeset
        self.timead_name = StringVar()
        self.timead_type = StringVar()
        self.timeindex   = StringVar()
        self.startonly = BooleanVar()
        self.endonly = BooleanVar()
        self.shour = StringVar()
        self.smin  = StringVar()
        self.ehour = StringVar()
        self.emin  = StringVar()

        # For tempset
        self.tempad_name = StringVar()
        self.lowonly  = BooleanVar()
        self.highonly = BooleanVar()
        self.lowtemp  = StringVar()
        self.hightemp = StringVar()

        (mode,targetTemp) = getStat()
        if DEBUG > 0:
            print "Initial setup:"
            print "  MODE = " + mode
            print "  TEMP = " + str(targetTemp)
        self.newmode.set(mode)
        self.targetTempf.set(targetTemp)

        self.mainframe = Frame(top)
        self.mainframe.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.mainframe.configure(relief=GROOVE)
        self.mainframe.configure(borderwidth="2")
        self.mainframe.configure(relief=GROOVE)
        self.mainframe.configure(background="#000000")
        self.mainframe.configure(width=475)

        # Create a frame for the list setting page and then lower it out of the way
        self.listset = Frame(top)
        self.listset.place(relx=0.03, rely=0.05, relheight=0.91, relwidth=0.94)
        self.listset.configure(relief=GROOVE)
        self.listset.configure(borderwidth="2")
        self.listset.configure(relief=GROOVE)
        self.listset.configure(takefocus="1")
        self.listset.configure(background="#000000")
        self.listset.configure(width=450)
        self.listset.lower(self.mainframe)

        # Create a frame for the add setting page and then lower it out of the way
        self.addset = Frame(top)
        self.addset.place(relx=0.040, rely=0.060, relheight=0.89, relwidth=0.92)
        self.addset.configure(relief=GROOVE)
        self.addset.configure(borderwidth="2")
        self.addset.configure(relief=GROOVE)
        self.addset.configure(takefocus="1")
        self.addset.configure(background="#000000")
        self.addset.configure(width=435)
        self.addset.lower(self.mainframe)

        # Create a frame for the edit schedule page and then lower it out of the way
        self.editset = Frame(top)
        self.editset.place(relx=0.040, rely=0.060, relheight=0.89, relwidth=0.92)
        self.editset.configure(relief=GROOVE)
        self.editset.configure(borderwidth="2")
        self.editset.configure(relief=GROOVE)
        self.editset.configure(takefocus="1")
        self.editset.configure(background="#000000")
        self.editset.configure(width=435)
        self.editset.lower(self.mainframe)

        # create a frame for adjusting time and then lower it out of the way
        self.timeset = Frame(top)
        self.timeset.place(relx=0.080, rely=0.100, relheight=0.60, relwidth=0.60)
        self.timeset.configure(relief=GROOVE)
        self.timeset.configure(borderwidth="2")
        self.timeset.configure(relief=GROOVE)
        self.timeset.configure(takefocus="1")
        self.timeset.configure(background="#000000")
        self.timeset.configure(width=435)
        self.timeset.lower(self.mainframe)

        # create a frame for adjusting temperature and then lower it out of the way
        self.tempset = Frame(top)
        self.tempset.place(relx=0.080, rely=0.100, relheight=0.60, relwidth=0.60)
        self.tempset.configure(relief=GROOVE)
        self.tempset.configure(borderwidth="2")
        self.tempset.configure(relief=GROOVE)
        self.tempset.configure(takefocus="1")
        self.tempset.configure(background="#000000")
        self.tempset.configure(width=435)
        self.tempset.lower(self.mainframe)

        logo = PhotoImage(file='images/thermopi.gif')
        self.logol = Label(self.mainframe)
        self.logol.place(relx=0.01, rely=0.01, height=81, width=81)
        self.logol.configure(background="#000000")
        self.logol.configure(image=logo)
        self.logol.image = logo

        self.currentl = Label(self.mainframe)
        self.currentl.place(relx=0.23, rely=0.06, height=30, width=87)
        self.currentl.configure(activebackground="#000000")
        self.currentl.configure(activeforeground="white")
        self.currentl.configure(activeforeground="#ffffff")
        self.currentl.configure(background="#000000")
        self.currentl.configure(foreground="#ffffff")
        self.currentl.configure(text='''Current
temp''')

        self.humidityl = Label(self.mainframe)
        self.humidityl.place(relx=0.57, rely=0.06, height=30, width=117)
        self.humidityl.configure(activebackground="black")
        self.humidityl.configure(activeforeground="white")
        self.humidityl.configure(activeforeground="white")
        self.humidityl.configure(background="black")
        self.humidityl.configure(foreground="white")
        self.humidityl.configure(highlightbackground="black")
        self.humidityl.configure(text='''Current
humidity''')

        self.current = Entry(self.mainframe)
        self.current.place(relx=0.41, rely=0.03, relheight=0.16, relwidth=0.16)
        self.current.configure(background="black")
        self.current.configure(disabledbackground="black")
        self.current.configure(disabledforeground="white")
        self.current.configure(highlightthickness="0")
        self.current.configure(borderwidth="0")
        self.current.configure(font=self.bigFont)
        self.current.configure(foreground="white")
        self.current.configure(selectbackground="#c4c4c4")
        self.current.configure(textvariable=self.indoorTempf)
        self.current.configure(justify=CENTER)

        self.humidity = Entry(self.mainframe)
        self.humidity.place(relx=0.77, rely=0.03, relheight=0.16, relwidth=0.16)
        self.humidity.configure(background="black")
        self.humidity.configure(highlightthickness="0")
        self.humidity.configure(borderwidth="0")
        self.humidity.configure(font=self.bigFont)
        self.humidity.configure(foreground="white")
        self.humidity.configure(selectbackground="#c4c4c4")
        self.humidity.configure(textvariable=self.humidityf)
        self.humidity.configure(justify=CENTER)

        self.rb0 = Radiobutton(self.mainframe)
        self.rb0.place(relx=0.06, rely=0.28, relheight=0.06, relwidth=0.12)
        self.rb0.configure(selectcolor='black')
        self.rb0.configure(activebackground="white")
        self.rb0.configure(activeforeground="black")
        self.rb0.configure(background="black")
        self.rb0.configure(foreground="white")
        self.rb0.configure(disabledforeground="white")
        self.rb0.configure(highlightbackground="black")
        self.rb0.configure(justify=LEFT)
        self.rb0.configure(text='Heat')
        self.rb0.configure(value='heat')
        self.rb0.configure(variable=self.newmode)
        self.rb0.configure(anchor=W)

        self.rb1 = Radiobutton(self.mainframe)
        self.rb1.place(relx=0.06, rely=0.34, relheight=0.06, relwidth=0.12)
        self.rb1.configure(selectcolor='black')
        self.rb1.configure(activebackground="white")
        self.rb1.configure(activeforeground="black")
        self.rb1.configure(background="black")
        self.rb1.configure(foreground="white")
        self.rb1.configure(disabledforeground="white")
        self.rb1.configure(highlightbackground="black")
        self.rb1.configure(justify=LEFT)
        self.rb1.configure(text='Cool')
        self.rb1.configure(value='cool')
        self.rb1.configure(variable=self.newmode)
        self.rb1.configure(anchor=W)

        self.rb2 = Radiobutton(self.mainframe)
        self.rb2.place(relx=0.06, rely=0.40, relheight=0.06, relwidth=0.15)
        self.rb2.configure(selectcolor='black')
        self.rb2.configure(activebackground="white")
        self.rb2.configure(activeforeground="black")
        self.rb2.configure(background="black")
        self.rb2.configure(foreground="white")
        self.rb2.configure(disabledforeground="white")
        self.rb2.configure(highlightbackground="black")
        self.rb2.configure(justify=LEFT)
        self.rb2.configure(text='EHeat')
        self.rb2.configure(value='eheat')
        self.rb2.configure(variable=self.newmode)
        self.rb2.configure(anchor=W)

        self.rb3 = Radiobutton(self.mainframe)
        self.rb3.place(relx=0.06, rely=0.46, relheight=0.06, relwidth=0.12)
        self.rb3.configure(selectcolor='black')
        self.rb3.configure(activebackground="white")
        self.rb3.configure(activeforeground="black")
        self.rb3.configure(background="black")
        self.rb3.configure(foreground="white")
        self.rb3.configure(disabledforeground="white")
        self.rb3.configure(highlightbackground="black")
        self.rb3.configure(justify=LEFT)
        self.rb3.configure(text='Off')
        self.rb3.configure(value='off')
        self.rb3.configure(variable=self.newmode)
        self.rb3.configure(anchor=W)

        self.heatstat = Label(self.mainframe)
        self.heatstat.place(relx=0.25, rely=0.28, height=18, width=77)
        self.heatstat.configure(activebackground="black")
        self.heatstat.configure(activeforeground="black")
        self.heatstat.configure(background="black")
        self.heatstat.configure(disabledforeground="red")
        self.heatstat.configure(foreground="red")
        self.heatstat.configure(highlightbackground="black")
        self.heatstat.configure(highlightcolor="red")
        self.heatstat.configure(textvariable=self.heatStringf)

        self.coolstat = Label(self.mainframe)
        self.coolstat.place(relx=0.25, rely=0.34, height=18, width=77)
        self.coolstat.configure(activebackground="black")
        self.coolstat.configure(activeforeground="cyan")
        self.coolstat.configure(background="black")
        self.coolstat.configure(disabledforeground="cyan")
        self.coolstat.configure(foreground="cyan")
        self.coolstat.configure(highlightbackground="black")
        self.coolstat.configure(highlightcolor="cyan")
        self.coolstat.configure(textvariable=self.coolStringf)

        self.fanstat = Label(self.mainframe)
        self.fanstat.place(relx=0.25, rely=0.40, height=18, width=77)
        self.fanstat.configure(activebackground="black")
        self.fanstat.configure(activeforeground="green")
        self.fanstat.configure(background="black")
        self.fanstat.configure(disabledforeground="green")
        self.fanstat.configure(foreground="green")
        self.fanstat.configure(highlightbackground="black")
        self.fanstat.configure(highlightcolor="green")
        self.fanstat.configure(textvariable=self.fanStringf)

        self.idlestat = Label(self.mainframe)
        self.idlestat.place(relx=0.25, rely=0.46, height=18, width=77)
        self.idlestat.configure(activebackground="black")
        self.idlestat.configure(activeforeground="white")
        self.idlestat.configure(background="black")
        self.idlestat.configure(disabledforeground="white")
        self.idlestat.configure(foreground="white")
        self.idlestat.configure(highlightbackground="black")
        self.idlestat.configure(highlightcolor="white")
        self.idlestat.configure(textvariable=self.idleStringf)

        self.sys_status = Label(self.mainframe)
        self.sys_status.place(relx=0.14, rely=0.22, height=15, width=104)
        self.sys_status.configure(activebackground="black")
        self.sys_status.configure(activeforeground="white")
        self.sys_status.configure(activeforeground="white")
        self.sys_status.configure(background="black")
        self.sys_status.configure(disabledforeground="white")
        self.sys_status.configure(font=self.font10)
        self.sys_status.configure(foreground="white")
        self.sys_status.configure(highlightbackground="black")
        self.sys_status.configure(highlightcolor="white")
        self.sys_status.configure(text='System Status')

        self.temp = Entry(self.mainframe)
        self.temp.place(relx=0.53, rely=0.28, relheight=0.19, relwidth=0.2)
        self.temp.configure(background="black")
        self.temp.configure(disabledbackground="black")
        self.temp.configure(disabledforeground="white")
        self.temp.configure(font=self.largeFont)
        self.temp.configure(foreground="white")
        self.temp.configure(highlightbackground="black")
        self.temp.configure(highlightcolor="white")
        self.temp.configure(selectbackground="black")
        self.temp.configure(selectforeground="white")
        self.temp.configure(textvariable=self.targetTempf)
        self.temp.configure(justify=CENTER)

        self.templ = Label(self.mainframe)
        self.templ.place(relx=0.58, rely=0.2, height=26, width=160)
        self.templ.configure(activebackground="black")
        self.templ.configure(activeforeground="white")
        self.templ.configure(activeforeground="white")
        self.templ.configure(background="black")
        self.templ.configure(disabledforeground="white")
        self.templ.configure(font=self.font10)
        self.templ.configure(foreground="white")
        self.templ.configure(highlightbackground="black")
        self.templ.configure(highlightcolor="white")
        self.templ.configure(text='Target temperature')

        self.goButton = Button(self.mainframe)
        self.goButton.place(relx=0.78, rely=0.28, height=60, width=68)
        self.goButton.configure(activebackground="white")
        self.goButton.configure(background="black")
        self.goButton.configure(disabledforeground="white")
        self.goButton.configure(font=self.font14)
        self.goButton.configure(foreground="white")
        self.goButton.configure(highlightbackground="white")
        self.goButton.configure(text='Go!')
        self.goButton.configure(command=self.setstat)

        self.dectnhButton = Button(self.mainframe)
        self.dectnhButton.place(relx=0.53, rely=0.48, height=30, width=46)
        self.dectnhButton.configure(activebackground="#d9d9d9")
        self.dectnhButton.configure(font=self.font14)
        self.dectnhButton.configure(text='-1')
        self.dectnhButton.configure(command=self.decr)

        self.deconeButton = Button(self.mainframe)
        self.deconeButton.place(relx=0.63, rely=0.48, height=30, width=46)
        self.deconeButton.configure(activebackground="#d9d9d9")
        self.deconeButton.configure(font=self.font14)
        self.deconeButton.configure(text='<')
        self.deconeButton.configure(command=self.decrtnh)

        self.inctnhButton = Button(self.mainframe)
        self.inctnhButton.place(relx=0.73, rely=0.48, height=30, width=46)
        self.inctnhButton.configure(activebackground="#d9d9d9")
        self.inctnhButton.configure(font=self.font14)
        self.inctnhButton.configure(text='>')
        self.inctnhButton.configure(command=self.incrtnh)

        self.inconeButton = Button(self.mainframe)
        self.inconeButton.place(relx=0.83, rely=0.48, height=30, width=46)
        self.inconeButton.configure(activebackground="#d9d9d9")
        self.inconeButton.configure(font=self.font14)
        self.inconeButton.configure(text='+1')
        self.inconeButton.configure(command=self.incr)

        if weatherEnabled == True and scheduleEnabled == True:
            self.weatherhead = Label(self.mainframe)
            self.weatherhead.place(relx=0.10, rely=0.60, height=22, width=170)
            self.weatherhead.configure(text='''Current Conditions''')
            self.weatherhead.configure(font=self.font12)
            self.weatherhead.configure(bg='black')
            self.weatherhead.configure(fg='white')

            self.weatherstat = Label(self.mainframe)
            self.weatherstat.place(relx=0.04, rely=0.66, height=75, width=230)
            self.weatherstat.configure(textvariable=self.Weatherf)
            self.weatherstat.configure(font=self.weatherFont)
            self.weatherstat.configure(bg='black')
            self.weatherstat.configure(fg='white')
            self.weatherstat.configure(wraplength=230)

            self.schedulehead = Label(self.mainframe)
            self.schedulehead.place(relx=0.60, rely=0.60, height=22, width=154)
            self.schedulehead.configure(text='''Schedule''')
            self.schedulehead.configure(font=self.font12)
            self.schedulehead.configure(bg='black')
            self.schedulehead.configure(fg='white')

            self.schedulestat = Label(self.mainframe)
            self.schedulestat.place(relx=0.55, rely=0.68, height=60, width=200)
            self.schedulestat.configure(textvariable=self.scheduleStatf)
            self.schedulestat.configure(font=self.scheduleFont)
            self.schedulestat.configure(bg='black')
            self.schedulestat.configure(fg='white')
            self.schedulestat.configure(wraplength=200)

            self.scheddis = Button(self.mainframe)
            self.scheddis.place(relx=0.53, rely=0.90, height=30, width=60)
            self.scheddis.configure(text='')
            self.scheddis.configure(textvariable=self.scheddisF)
            self.scheddis.configure(font=self.font10)
            self.scheddis.configure(command=self.disSched)
            self.scheddis.configure(height=1)
            self.scheddis.configure(width=2)
            self.scheddis.configure(bg='black')
            self.scheddis.configure(fg='white')

            self.schedres = Button(self.mainframe)
            self.schedres.place(relx=0.67, rely=0.90, height=30, width=60)
            self.schedres.configure(textvariable=self.schedresF)
            self.schedres.configure(font=self.font10)
            self.schedres.configure(command=self.resSched)
            self.schedres.configure(height=1)
            self.schedres.configure(width=2)
            self.schedres.configure(bg='black')
            self.schedres.configure(fg='white')

            if guischedule.holding == True:
                self.schedres.configure(state=NORMAL)
                self.schedresF.set('resume')
            else:
                self.schedres.configure(state=DISABLED)
                self.schedresF.set('------')

            self.schedcon = Button(self.mainframe)
            self.schedcon.place(relx=0.80, rely=0.90, height=30, width=60)
            self.schedcon.configure(text='config')
            #self.schedcon.configure(font=self.scheduleFont)
            self.schedcon.configure(font=self.font10)
            self.schedcon.configure(command=self.confSched)
            self.schedcon.configure(height=1)
            self.schedcon.configure(width=2)
            self.schedcon.configure(bg='black')
            self.schedcon.configure(fg='white')

        elif weatherEnabled == True:
            self.weatherhead = Label(self.mainframe)
            self.weatherhead.place(relx=0.10, rely=0.60, height=22, width=154)
            self.weatherhead.configure(text='''Current Conditions''')
            self.weatherhead.configure(font=self.font12)
            self.weatherhead.configure(bg='black')
            self.weatherhead.configure(fg='white')

            self.weatherstat = Label(self.mainframe)
            self.weatherstat.place(relx=0.04, rely=0.71, height=75, width=230)
            self.weatherstat.configure(textvariable=self.Weatherf)
            self.weatherstat.configure(font=self.weatherFont)
            self.weatherstat.configure(bg='black')
            self.weatherstat.configure(fg='white')
            self.weatherstat.configure(wraplength=230)

        elif scheduleEnabled == True:
            self.schedulehead = Label(self.mainframe)
            self.schedulehead.place(relx=0.58, rely=0.60, height=22, width=154)
            self.schedulehead.configure(text='''Schedule''')
            self.schedulehead.configure(font=self.font12)
            self.schedulehead.configure(bg='black')
            self.schedulehead.configure(fg='white')

            self.schedulestat = Label(self.mainframe)
            self.schedulestat.place(relx=0.55, rely=0.68, height=60, width=200)
            self.schedulestat.configure(textvariable=self.scheduleStatf)
            self.schedulestat.configure(font=self.scheduleFont)
            self.schedulestat.configure(bg='black')
            self.schedulestat.configure(fg='white')
            self.schedulestat.configure(wraplength=200)

            self.scheddis = Button(self.mainframe)
            self.scheddis.place(relx=0.58, rely=0.90, height=30, width=60)
            self.scheddis.configure(text='')
            self.scheddis.configure(textvariable=self.scheddisF)
            self.scheddis.configure(font=self.scheduleFont)
            self.scheddis.configure(command=self.disSched)
            self.scheddis.configure(height=1)
            self.scheddis.configure(width=2)
            self.scheddis.configure(bg='black')
            self.scheddis.configure(fg='white')

            self.schedres = Button(self.mainframe)
            self.schedres.place(relx=0.67, rely=0.90, height=30, width=60)
            self.schedres.configure(textvariable=self.schedresF)
            self.schedres.configure(font=self.font10)
            self.schedres.configure(command=self.resSched)
            self.schedres.configure(height=1)
            self.schedres.configure(width=2)
            self.schedres.configure(bg='black')
            self.schedres.configure(fg='white')

            self.schedcon = Button(self.mainframe)
            self.schedcon.place(relx=0.80, rely=0.90, height=30, width=60)
            self.schedcon.configure(text='config')
            self.schedcon.configure(font=self.scheduleFont)
            self.schedcon.configure(command=self.confSched)
            self.schedcon.configure(height=1)
            self.schedcon.configure(width=2)
            self.schedcon.configure(bg='black')
            self.schedcon.configure(fg='white')

        ''' Below for confSched() '''
        self.sethead = Label(self.listset,text='Settings', font=self.font14, bg='black', fg='white')
        self.sethead.place(relx=0.3, rely=0.05, height=25, width=150)

        self.setnamel = Label(self.listset, font=self.font12, bg='black', fg='white')
        self.setnamel.configure(text='''Setting
Name''')
        self.setnamel.place(relx=0.05, rely=0.15, height=35, width=90)

        self.setlowl = Label(self.listset, font=self.font12, bg='black', fg='white')
        self.setlowl.configure(text='''Low
Temp''')
        self.setlowl.place(relx=0.30, rely=0.15, height=40, width=50)

        self.sethighl = Label(self.listset, font=self.font12, bg='black', fg='white')
        self.sethighl.configure(text='''High
Temp''')
        self.sethighl.place(relx=0.45, rely=0.15, height=40, width=50)

        #self.calendarl = Label(self.listset,text='', font=self.scheduleFont, bg='black', fg='white')
        #self.calendarl.place(relx=0.05, rely=0.1, height=25, width=150)

        ''' Below for editSetting() '''
        namel = Label(self.editset)
        namel.place(relx=0.05, rely=0.1, height=25, width=150)
        namel.configure(activebackground="black")
        namel.configure(activeforeground="white")
        namel.configure(activeforeground="white")
        namel.configure(background="black")
        namel.configure(disabledforeground="white")
        namel.configure(font=self.font12)
        namel.configure(foreground="white")
        namel.configure(highlightbackground="black")
        namel.configure(highlightcolor="white")
        namel.configure(text='Setting Name')

        lowl = Label(self.editset)
        lowl.place(relx=0.45, rely=0.1, height=25, width=100)
        lowl.configure(activebackground="black")
        lowl.configure(activeforeground="white")
        lowl.configure(activeforeground="white")
        lowl.configure(background="black")
        lowl.configure(disabledforeground="white")
        lowl.configure(font=self.font12)
        lowl.configure(foreground="white")
        lowl.configure(highlightbackground="black")
        lowl.configure(highlightcolor="white")
        lowl.configure(text='Low Temp')

        highl = Label(self.editset)
        highl.place(relx=0.70, rely=0.1, height=25, width=100)
        highl.configure(activebackground="black")
        highl.configure(activeforeground="white")
        highl.configure(activeforeground="white")
        highl.configure(background="black")
        highl.configure(disabledforeground="white")
        highl.configure(font=self.font12)
        highl.configure(foreground="white")
        highl.configure(highlightbackground="black")
        highl.configure(highlightcolor="white")
        highl.configure(text='High Temp')

        name_entry = Entry(self.editset)
        name_entry.place(relx=0.05, rely=0.20, height=25, width=150)
        name_entry.configure(background="black")
        name_entry.configure(disabledbackground="black")
        name_entry.configure(disabledforeground="white")
        name_entry.configure(font=self.font10)
        name_entry.configure(foreground="white")
        name_entry.configure(selectbackground="#c4c4c4")
        name_entry.configure(textvariable=self.nnamef)
        name_entry.configure(justify=CENTER)
        name_entry.configure(state=DISABLED)

        self.low_btn = Button(self.editset)
        self.low_btn.place(relx=0.45, rely=0.20, height=25, width=100)
        self.low_btn.configure(background="black")
        #self.low_btn.configure(disabledbackground="black")
        #self.low_btn.configure(disabledforeground="white")
        self.low_btn.configure(font=self.font10)
        self.low_btn.configure(foreground="white")
        #self.low_btn.configure(selectbackground="#c4c4c4")
        self.low_btn.configure(textvariable=self.nlowf)
        self.low_btn.configure(justify=CENTER)

        self.high_btn = Button(self.editset)
        self.high_btn.place(relx=0.70, rely=0.20, height=25, width=100)
        self.high_btn.configure(background="black")
        #self.high_btn.configure(disabledbackground="black")
        #self.high_btn.configure(disabledforeground="white")
        self.high_btn.configure(font=self.font10)
        self.high_btn.configure(foreground="white")
        #self.high_btn.configure(selectbackground="#c4c4c4")
        self.high_btn.configure(textvariable=self.nhighf)
        self.high_btn.configure(justify=CENTER)

        saveold = partial(self.saveSetting,False)
        sbutton = Button(self.editset)
        sbutton.place(relx=0.30, rely=0.80, height=25, width=68)
        sbutton.configure(activebackground="white")
        sbutton.configure(background="black")
        sbutton.configure(disabledforeground="white")
        sbutton.configure(font=self.font12)
        sbutton.configure(foreground="white")
        sbutton.configure(highlightbackground="white")
        sbutton.configure(text='Save')
        sbutton.configure(command=saveold)

        lowerme = partial(self.editset.lower,self.mainframe)
        cbutton = Button(self.editset)
        cbutton.place(relx=0.50, rely=0.80, height=25, width=68)
        cbutton.configure(activebackground="white")
        cbutton.configure(background="black")
        cbutton.configure(disabledforeground="white")
        cbutton.configure(font=self.font12)
        cbutton.configure(foreground="white")
        cbutton.configure(highlightbackground="white")
        cbutton.configure(text='Close')
        cbutton.configure(command=lowerme)

        # Below for universal time setting page
        self.timel = Label(self.timeset)
        self.timel.place(relx=0.05, rely=0.1, height=25, width=160)
        self.timel.configure(activebackground="black")
        self.timel.configure(activeforeground="white")
        self.timel.configure(activeforeground="white")
        self.timel.configure(background="black")
        self.timel.configure(disabledforeground="white")
        self.timel.configure(font=self.font10)
        self.timel.configure(foreground="white")
        self.timel.configure(highlightbackground="black")
        self.timel.configure(highlightcolor="white")
        self.timel.configure(text='Adjust times for:')

        self.timen = Label(self.timeset)
        self.timen.place(relx=0.65, rely=0.1, height=25, width=90)
        self.timen.configure(activebackground="black")
        self.timen.configure(activeforeground="white")
        self.timen.configure(activeforeground="white")
        self.timen.configure(background="black")
        self.timen.configure(disabledforeground="white")
        self.timen.configure(font=self.font12)
        self.timen.configure(foreground="white")
        self.timen.configure(highlightbackground="black")
        self.timen.configure(highlightcolor="white")
        self.timen.configure(textvariable=self.timead_name)

        self.sdechButton = Button(self.timeset)
        self.sdechButton.place(relx=0.10, rely=0.50, height=30, width=46)
        self.sdechButton.configure(activebackground="#d9d9d9")
        self.sdechButton.configure(font=self.font12)
        self.sdechButton.configure(text='-1h')
        self.sdechButton.configure(command=self.stimedecrh)

        self.sdecmButton = Button(self.timeset)
        self.sdecmButton.place(relx=0.30, rely=0.50, height=30, width=46)
        self.sdecmButton.configure(activebackground="#d9d9d9")
        self.sdecmButton.configure(font=self.font12)
        self.sdecmButton.configure(text='-10m')
        self.sdecmButton.configure(command=self.stimedecrtnm)

        self.sinchButton = Button(self.timeset)
        self.sinchButton.place(relx=0.50, rely=0.50, height=30, width=46)
        self.sinchButton.configure(activebackground="#d9d9d9")
        self.sinchButton.configure(font=self.font12)
        self.sinchButton.configure(text='+10m')
        self.sinchButton.configure(command=self.stimeincrtnm)

        self.sincmButton = Button(self.timeset)
        self.sincmButton.place(relx=0.70, rely=0.50, height=30, width=46)
        self.sincmButton.configure(activebackground="#d9d9d9")
        self.sincmButton.configure(font=self.font12)
        self.sincmButton.configure(text='+1h')
        self.sincmButton.configure(command=self.stimeincrh)

        self.edechButton = Button(self.timeset)
        self.edechButton.place(relx=0.10, rely=0.65, height=25, width=46)
        self.edechButton.configure(activebackground="#d9d9d9")
        self.edechButton.configure(font=self.font12)
        self.edechButton.configure(text='-1h')
        self.edechButton.configure(command=self.etimedecrh)

        self.edecmButton = Button(self.timeset)
        self.edecmButton.place(relx=0.30, rely=0.65, height=25, width=46)
        self.edecmButton.configure(activebackground="#d9d9d9")
        self.edecmButton.configure(font=self.font12)
        self.edecmButton.configure(text='-10m')
        self.edecmButton.configure(command=self.etimedecrtnm)

        self.einchButton = Button(self.timeset)
        self.einchButton.place(relx=0.50, rely=0.65, height=25, width=46)
        self.einchButton.configure(activebackground="#d9d9d9")
        self.einchButton.configure(font=self.font12)
        self.einchButton.configure(text='+10m')
        self.einchButton.configure(command=self.etimeincrtnm)

        self.eincmButton = Button(self.timeset)
        self.eincmButton.place(relx=0.70, rely=0.65, height=25, width=46)
        self.eincmButton.configure(activebackground="#d9d9d9")
        self.eincmButton.configure(font=self.font12)
        self.eincmButton.configure(text='+1h')
        self.eincmButton.configure(command=self.etimeincrh)

        self.slabel = Label(self.timeset,text='Start', font=self.font10, bg='black', fg='white')
        self.elabel = Label(self.timeset,text='End', font=self.font10, bg='black', fg='white')
        self.shourl = Label(self.timeset,textvariable=self.shour, font=self.font12, bg='white', fg='black')
        self.sminl  = Label(self.timeset,textvariable=self.smin, font=self.font12, bg='white', fg='black')
        self.ehourl = Label(self.timeset,textvariable=self.ehour, font=self.font12, bg='white', fg='black')
        self.eminl  = Label(self.timeset,textvariable=self.emin, font=self.font12, bg='white', fg='black')

        self.slabel.place(relx=0.05, rely=0.25, height=15, width=75)
        self.shourl.place(relx=0.30, rely=0.25, height=15, width=70)
        self.sminl.place(relx=0.50, rely=0.25, height=15, width=70)
        self.elabel.place(relx=0.05, rely=0.35, height=15, width=75)
        self.ehourl.place(relx=0.30, rely=0.35, height=15, width=70)
        self.eminl.place(relx=0.50, rely=0.35, height=15, width=70)

        sbutton = Button(self.timeset, text='Save', command=self.saveTime)
        sbutton.place(relx=0.40, rely=0.80, height=25, width=40)
        tlowerme = partial(self.timeset.lower,self.mainframe)
        cbutton = Button(self.timeset, text='Close', command=tlowerme)
        cbutton.place(relx=0.55, rely=0.80, height=25, width=40)

        # Below for universal temperature setting page
        self.tempal = Label(self.tempset)
        self.tempal.place(relx=0.05, rely=0.1, height=25, width=160)
        self.tempal.configure(activebackground="black")
        self.tempal.configure(activeforeground="white")
        self.tempal.configure(activeforeground="white")
        self.tempal.configure(background="black")
        self.tempal.configure(disabledforeground="white")
        self.tempal.configure(font=self.font10)
        self.tempal.configure(foreground="white")
        self.tempal.configure(highlightbackground="black")
        self.tempal.configure(highlightcolor="white")
        self.tempal.configure(text='Adjust temps for:')

        self.tempn = Label(self.tempset)
        self.tempn.place(relx=0.65, rely=0.1, height=25, width=90)
        self.tempn.configure(activebackground="black")
        self.tempn.configure(activeforeground="white")
        self.tempn.configure(activeforeground="white")
        self.tempn.configure(background="black")
        self.tempn.configure(disabledforeground="white")
        self.tempn.configure(font=self.font12)
        self.tempn.configure(foreground="white")
        self.tempn.configure(highlightbackground="black")
        self.tempn.configure(highlightcolor="white")
        self.tempn.configure(textvariable=self.tempad_name)

        self.llabel = Label(self.tempset,text='Low', font=self.font12, bg='black', fg='white')
        self.hlabel = Label(self.tempset,text='High', font=self.font12, bg='black', fg='white')
        self.ltempl = Label(self.tempset,textvariable=self.lowtemp, font=self.font12, bg='white', fg='black')
        self.htempl = Label(self.tempset,textvariable=self.hightemp, font=self.font12, bg='white', fg='black')

        self.llabel.place(relx=0.05, rely=0.25, height=15, width=75)
        self.hlabel.place(relx=0.05, rely=0.35, height=15, width=75)
        self.ltempl.place(relx=0.30, rely=0.25, height=15, width=75)
        self.htempl.place(relx=0.30, rely=0.35, height=15, width=75)

        self.lincButton = Button(self.tempset)
        self.lincButton.place(relx=0.20, rely=0.50, height=30, width=46)
        self.lincButton.configure(activebackground="#d9d9d9")
        self.lincButton.configure(font=self.font12)
        self.lincButton.configure(text='+1')
        self.lincButton.configure(command=self.ltempinc)

        self.ldecButton = Button(self.tempset)
        self.ldecButton.place(relx=0.40, rely=0.50, height=30, width=46)
        self.ldecButton.configure(activebackground="#d9d9d9")
        self.ldecButton.configure(font=self.font12)
        self.ldecButton.configure(text='-1')
        self.ldecButton.configure(command=self.ltempdec)

        self.hincButton = Button(self.tempset)
        self.hincButton.place(relx=0.60, rely=0.50, height=30, width=46)
        self.hincButton.configure(activebackground="#d9d9d9")
        self.hincButton.configure(font=self.font12)
        self.hincButton.configure(text='+1')
        self.hincButton.configure(command=self.htempinc)

        self.hdecButton = Button(self.tempset)
        self.hdecButton.place(relx=0.80, rely=0.50, height=30, width=46)
        self.hdecButton.configure(activebackground="#d9d9d9")
        self.hdecButton.configure(font=self.font12)
        self.hdecButton.configure(text='-1')
        self.hdecButton.configure(command=self.htempdec)

        tsbutton = Button(self.tempset, text='Save', command=self.saveTemp)
        tsbutton.place(relx=0.40, rely=0.80, height=25, width=40)
        ttlowerme = partial(self.tempset.lower,self.mainframe)
        tcbutton = Button(self.tempset, text='Close', command=ttlowerme)
        tcbutton.place(relx=0.55, rely=0.80, height=25, width=40)

        # Below for popup numpad
        self.numset = Frame(top)
        self.numset.place(relx=0.2, rely=0.04, relheight=0.91, relwidth=0.44)
        self.numset.configure(relief=GROOVE)
        self.numset.configure(borderwidth="2")
        self.numset.configure(relief=GROOVE)
        self.numset.configure(takefocus="1")
        self.numset.configure(background="#000000")
        self.numset.configure(width=105)
        self.numset.lower(self.mainframe)

        self.num_list = [
            '1', '2', '3',
            '4', '5', '6',
            '7', '8', '9',
            '0', '.', 'BS',
            'Enter'
        ]

        # Below for popup keyboard
        self.keyset = Frame(top)
        self.keyset.place(relx=0.02, rely=0.02, relheight=0.91, relwidth=0.94)
        self.keyset.configure(relief=GROOVE)
        self.keyset.configure(borderwidth="2")
        self.keyset.configure(relief=GROOVE)
        self.keyset.configure(takefocus="1")
        self.keyset.configure(background="#000000")
        self.keyset.configure(width=450)
        self.keyset.lower(self.mainframe)

        self.btn_list = [
            '1',    '2', '3', '4', '5', '6', '7', '8', '9', '0', 'BS',
            'q',    'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '', '',
            'Caps', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'Enter',
            'Shift','z', 'x', 'c', 'v', 'b', 'n', 'm', '.', '/',
            '<<',   'Space', '>>', 'Clear'
        ]
        self.btn_listU = [
            '!',    '@', '#', '$', '%', '^', '&', '*', '(', ')', 'BS',
            'Q',    'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '', '',
            'Caps', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Enter',
            'Shift','Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>',
            '<<',   'Space', '>>', 'Clear'
        ]
        self.btns = [
           'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10',
           'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'b10', 'b11',
           'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'c10',
           'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9',
           'e0', 'e1', 'e2', 'e3'
        ]

        self.keycols = 12
        self.keyrows = 5
        self.keystate = 1

    # Keyboard functions
    def call(self, num):
        content = self.display.get() + num
        self.display.set(content)
        if self.keystate == 2:  # Shift press
            self.updatepopupkeyboard(1)
            self.keystate = 1

    def EnterNum(self,varname):
        content = self.display.get()
        if content == '':
            pass
        else:
            self.keyresult = content
            varname.set(self.keyresult)
            self.numset.lower(self.mainframe)

    def Enter(self,varname):
        content = self.display.get()
        if content == '':
            pass
        else:
            self.keyresult = content
            varname.set(self.keyresult)
            self.keyset.lower(self.mainframe)

    def clear(self):
        self.display.set('')

    def Backspace(self):
        pass

    def Shift(self):
        if self.keystate == 2:
            self.keystate = 1
        else:
            self.keystate = 2

        self.updatepopupkeyboard(self.keystate)

    def backspace(self):
        self.display.set(str(self.display.get()[:-1]))

    def CapsLock(self):
        if self.keystate == 1:
            self.keystate = 2
        elif self.keystate == 2:
            self.keystate = 1
        self.updatepopupkeyboard(self.keystate)

    def Space(self):
        pass

    def updatepopupkeyboard(self,mtyp):
        if mtyp == 1:
            key = self.btn_list
        elif mtyp == 2:
            key = self.btn_listU

        i = -1

        for b in key:
            i += 1
            if len(b) == 1:
                cmd = lambda x=b:self.call(x)
                if DEBUG > 0:
                    print "Setting text of self.btns[" + str(i) + "] to " + b
                self.btns[i].configure(text=b,command=cmd)

    def popupnumpad(self,varname):
        self.numbtns = [
            'n0',  'n1',  'n2',
            'n3',  'n4',  'n5',
            'n6',  'n7',  'n8',
            'n9',  'n10', 'n11',
            'n12'
        ]

        self.keyresult = ''
        self.display.set('')
        self.numset.lift(self.addset)
        keylabel = Label(self.numset, font=('Helvetica', 18), relief='sunken', borderwidth=3, bg='gray80', anchor=SW, fg='green', textvariable=self.display)
        keylabel.place(relx=0.0, rely=0.0, height=35, width=105)

        fn = ('Helvetica', 10)
        fnbold = ('Helvetica', 10, 'bold')
        rel = 'raised'

        r = 1
        c = 0
        i = -1

        for b in self.num_list:
            i += 1
            c_span = 35
            r_span = 35
            cmd = lambda x=b:self.call(x)
            if c > 0:
#                cpos = c * 0.08
                cpos = c * 0.17
            else:
                cpos = 0
            rpos = r * 0.17

            if DEBUG > 0:
                print "Position " + self.numbtns[i] + " at " + str(cpos) + "/" + str(rpos)

            if b == 'Enter':
                c_span = 105
                cmd = lambda:self.EnterNum(varname)
                self.numbtns[i] = Button(self.numset, text = b, font = fnbold, command = cmd, relief = rel, bg = '#EF7321')
                self.numbtns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
            elif b == 'BS':
                cmd = lambda:self.backspace()
                self.numbtns[i] = Button(self.numset, text = b, font = fnbold, command = cmd, relief = rel)
                self.numbtns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
            else:
                self.numbtns[i] = Button(self.numset, text = b, font = fn, command = cmd, relief = rel)
                self.numbtns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)            

            c += 1
            if c == 3:
                r += 1
                c = 0

    def popupkeyboard(self,mtyp,varname):
        self.keyresult = ''
        self.display.set('')
        self.keyset.lift(self.addset)

        keylabel = Label(self.keyset, font=('Helvetica', 18), relief='sunken', borderwidth=3, bg='gray80', anchor=SW, fg='green', textvariable=self.display)
        keylabel.place(relx=0.0, rely=0.0, height=35, width=480)

        fn = ('Helvetica', 10)
        fnbold = ('Helvetica', 10, 'bold')
        rel = 'raised'

        if mtyp == 1:
            key = self.btn_list
        elif mtyp == 2:
            key = self.btn_listU

        r = 1
        c = 0
        i = -1

        for b in key:
            i += 1
            c_span = 35
            r_span = 35
            cmd = lambda x=b:self.call(x)
            if c > 0:
                #cpos = (c + 1) * 0.08
                cpos = c * 0.08
            else:
                cpos = 0
            rpos = r * 0.17

            if DEBUG > 0:
                print "Position " + self.btns[i] + " at " + str(cpos) + "/" + str(rpos)

            if (r == 1):
                if(c == (self.keycols - 2)): # Back Space
                    c_span = 70
                    cmd = lambda:self.backspace()
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
                else:
                    self.btns[i] = Button(self.keyset, text = b, font = fn, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
            elif (r == 2):
                if b == '':
                    next
                else:
                    self.btns[i] = Button(self.keyset, text = b, font = fn, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
            elif (r == 3):
                if(c == 0): # Capslock
                    cmd = lambda:self.CapsLock()
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
                elif (c == (self.keycols - 2)): # Enter
                    c_span = 70
                    r_span = 70
                    cmd = lambda:self.Enter(varname)
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel, bg = '#EF7321')
                    self.btns[i].place(relx=cpos, rely=rpos, width = r_span)
                else:
                    self.btns[i] = Button(self.keyset, text = b, font = fn, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
            elif (r == 4):
                if(c == 0): # Shift Left
                    cmd = lambda:self.Shift()
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
                elif(c == (self.keycols - 2)): # Shift Right
                    cmd = lambda:self.Shift()
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
                else:
                    self.btns[i] = Button(self.keyset, text = b, font = fn, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
            elif (r == 5):
                if(c == 0): # <<
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel, state=DISABLED)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
                elif(c == 1): # Space
                    c_span = 290
                    cmd = lambda:self.call(' ')
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
                elif(c == 2): # >>
                    cpos = 0.81
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel, state=DISABLED)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)
                elif(c == 3): # Clear
                    cpos = 0.91
                    cmd = lambda:self.clear()
                    self.btns[i] = Button(self.keyset, text = b, font = fnbold, command = cmd, relief = rel)
                    self.btns[i].place(relx=cpos, rely=rpos, width = c_span, height = r_span)

            c += 1
            if (c == (self.keycols - 2)):
                if(r == 4):
                    r += 1
                    c = 0
            elif(c == (self.keycols - 1)):
                if(r == 1) or (r == 3):
                    r += 1
                    c = 0
            elif (c == self.keycols):
                r += 1
                c = 0

    # MAIN TIMER for thermoGUI loop
    def timer(self):
        global root
        root.after(5000, self.timer)
        if DEBUG > 0:
            print "Updating..."

        (humidity,indoorTemp) = updateTemp()
        self.humidityf.set(humidity)
        self.indoorTempf.set(indoorTemp)
        self.getWhatsOn()

    # Another timed job to flash the status indicator
    def change_color(self):
        global root
        root.after(1000, self.change_color)
        current_text  = self.idleStringf.get()
        #if current_text == 'RUNNING':
        #print current_text
        if current_text == 'UNIT IDLE':
            self.idlestat.config(foreground='white')
        else:
            current_color = self.idlestat.cget("foreground")
            if current_color == "black":
                next_color = "white"
            else:
                next_color = "black"
            self.idlestat.config(foreground=next_color)
            time.sleep(0.5)

    def getWhatsOn(self):
        (obStatus,heatStatus,coolStatus,fanStatus) = getWhatsOn()
        idling = False

        if DEBUG > 0:
            print "obStatus:   " + str(obStatus)
            print "heatStatus: " + str(heatStatus)
            print "coolStatus: " + str(coolStatus)
            print "fanStatus:  " + str(fanStatus)

        if AC_TYPE == 0:
            # Standard AC
            if heatStatus == 1:
                self.heatStringf.set("HEAT ON")
            else:
                self.heatStringf.set("heat off")

            if coolStatus == 1:
                self.coolStringf.set("COOL ON")
            else:
                self.coolStringf.set("cool off")

            if fanStatus == 1:
                self.fanStringf.set("FAN ON")
            else:
                self.fanStringf.set("fan off")
        else:
            # Heat pump
            if heatStatus == 1:
                self.heatStringf.set("EHEAT")
            elif coolStatus == 1 and obStatus == 1:
                self.heatStringf.set("HEAT ON")
            else:
                self.heatStringf.set("heat off")

            if coolStatus == 1 and obStatus == 0:
                self.coolStringf.set("COOL ON")
            else:
                self.coolStringf.set("cool off")

            if fanStatus == 1:
                self.fanStringf.set("FAN ON")
            else:
                self.fanStringf.set("fan off")

        if heatStatus == 0 and coolStatus == 0 and fanStatus == 0:
            self.idleStringf.set("UNIT IDLE")
            idling = True
            self.idlestat.config(foreground='white')

        if DEBUG > 0:
            print "heatStringf: " + self.heatStringf.get()
            print "coolStringf: " + self.coolStringf.get()
            print "fanStringf:  " + self.fanStringf.get()

        if weatherEnabled == True:
            weatherstring = getWeather()
        else:
            weatherstring = 'No weather available'

        self.Weatherf.set(weatherstring)
        if scheduleEnabled == True:
            (mode,target) = getStat()
            (schedulename,scheduleactive) = getSched()

            if DEBUG > 0:
                print "Schedule name:   " + schedulename
                print "Schedule active: " + str(scheduleactive)

            if scheduleactive == True and guischedule.active == True:
                self.newmode.set(mode)
                self.targetTempf.set(target)

                if mode == 'off' and idling == True:
                    self.idleStringf.set('UNIT IDLE')
                else:
                    self.idleStringf.set('[' + schedulename + ']')

                tmps = get_sched(schedulename)
                if guischedule.holding == True:
                    self.scheduleStatf.set('[' + schedulename + '] HOLDING' + "\n" + tmps)
                else:
                    self.scheduleStatf.set('[' + schedulename + '] ACTIVE' + "\n" + tmps)
                self.scheddisF.set('disable')
            else:
                tmps = get_sched(schedulename)
                self.scheduleStatf.set('[' + schedulename + '] INACTIVE' + "\n" + tmps)
                self.scheddisF.set('enable')

            if guischedule.holding == True:
                self.schedres.configure(state=NORMAL)
                self.schedresF.set('resume')
            else:
                self.schedres.configure(state=DISABLED)
                self.schedresF.set('------')

    def setstat(self):
        temp_mode = self.newmode.get()
        if DEBUG > 0:
            print "New mode: " + temp_mode
        temp_targetTemp = self.targetTempf.get()
        setStat(temp_mode,temp_targetTemp)

    def resSched(self):
        global guischedule
        guischedule.nohold()
        self.schedresF.set('------')
        self.schedres.configure(state=DISABLED)

    def disSched(self):
        global guischedule
        # Disable current schedule
        if self.scheddisF.get() == 'enable':
            self.scheddisF.set('disable')
            self.newmode.set('cool')
            guischedule.set_active()
        else:
            self.scheddisF.set('enable')
#            self.newmode.set('off')
            guischedule.set_inactive()
        self.setstat()

    # Increment or decrement temp setting based on the click of one of the arrow buttons
    def incr(self):
        targetTemp = self.targetTempf.get()
        targetTemp = str(float(targetTemp) + 1)
        self.targetTempf.set(targetTemp)

    def incrtnh(self):
        targetTemp = self.targetTempf.get()
        targetTemp = str(float(targetTemp) + 0.1)
        self.targetTempf.set(targetTemp)

    def decr(self):
        targetTemp = self.targetTempf.get()
        targetTemp = str(float(targetTemp) - 1)
        self.targetTempf.set(targetTemp)

    def decrtnh(self):
        targetTemp = self.targetTempf.get()
        targetTemp = str(float(targetTemp) - 0.1)
        self.targetTempf.set(targetTemp)

    # The next set of functions only increment or decrement time fields from the timeset form
    def stimedecrtnm(self):
        smin = int(float(self.smin.get())) - 10
        if smin < 0:
            self.smin.set('59')
        elif smin > 59:
            self.smin.set('0')
        elif smin < 10 and smin > 0:
            self.smin.set('0' + str(smin))
        else:
            self.smin.set(str(smin))

    def stimeincrtnm(self):
        smin = int(float(self.smin.get())) + 10
        if smin < 0:
            self.smin.set('59')
        elif smin > 59:
            self.smin.set('0')
        elif smin < 10 and smin > 0:
            self.smin.set('0' + str(smin))
        else:
            self.smin.set(str(smin))

    def stimedecrh(self):
        shour = int(float(self.shour.get())) - 1
        if shour < 0:
            self.shour.set('23')
        elif shour > 23:
            self.shour.set('0')
        elif shour < 10 and shour > 0:
            self.shour.set('0' + str(shour))
        else:
            self.shour.set(str(shour))

    def stimeincrh(self):
        shour = int(float(self.shour.get())) + 1
        if shour < 0:
            self.shour.set('23')
        elif shour > 23:
            self.shour.set('0')
        elif shour < 10 and shour > 0:
            self.shour.set('0' + str(shour))
        else:
            self.shour.set(str(shour))

    def etimedecrtnm(self):
        emin = int(float(self.emin.get())) - 10
        if emin < 0:
            self.emin.set('59')
        elif emin > 59:
            self.emin.set('0')
        elif emin < 10 and emin > 0:
            self.emin.set('0' + str(emin))
        else:
            self.emin.set(str(emin))

    def etimeincrtnm(self):
        emin = int(float(self.emin.get())) + 10
        if emin < 0:
            self.emin.set('59')
        elif emin > 59:
            self.emin.set('0')
        elif emin < 10 and emin > 0:
            self.emin.set('0' + str(emin))
        else:
            self.emin.set(str(emin))

    def etimedecrh(self):
        ehour = int(float(self.ehour.get())) - 1
        if ehour < 0:
            self.ehour.set('23')
        elif ehour > 23:
            self.ehour.set('0')
        elif ehour < 10 and ehour > 0:
            self.ehour.set('0' + str(ehour))
        else:
            self.ehour.set(str(ehour))

    def etimeincrh(self):
        ehour = int(float(self.ehour.get())) + 1
        if ehour < 0:
            self.ehour.set('23')
        elif ehour > 23:
            self.ehour.set('0')
        elif ehour < 10 and ehour > 0:
            self.ehour.set('0' + str(ehour))
        else:
            self.ehour.set(str(ehour))

    # Show and update the time adjust window
    def timeAdj(self, start, end, name, typeof, startonly=False, endonly=False, index=0):
        self.timeset.lift(self.editset)
        if start is str:
            (shourin,sminin) = str.split(start, ':')
        else:
            shourin = ''
            sminin = ''
        if end is str:
            (ehourin,eminin) = str.split(end, ':')
        else:
            ehourin = ''
            eminin = ''

        if DEBUG > 0:
            print "timeAdj()"
            print "shourin:   " + shourin
            print "sminin:    " + sminin
            print "ehourin:   " + ehourin
            print "eminin:    " + eminin
            print "startonly: " + str(startonly)
            print "endonly:   " + str(endonly)

        # Normalize setup
        self.startonly.set(False)
        self.endonly.set(False)
        self.timeindex.set(index)
        self.sdechButton.config(state=NORMAL)
        self.sdecmButton.config(state=NORMAL)
        self.sinchButton.config(state=NORMAL)
        self.sincmButton.config(state=NORMAL)
        self.edechButton.config(state=NORMAL)
        self.edecmButton.config(state=NORMAL)
        self.einchButton.config(state=NORMAL)
        self.eincmButton.config(state=NORMAL)

        if startonly:
            self.startonly.set(True)
            self.edechButton.config(state=DISABLED)
            self.edecmButton.config(state=DISABLED)
            self.einchButton.config(state=DISABLED)
            self.eincmButton.config(state=DISABLED)
            self.slabel.configure(text='Start')
            self.elabel.configure(text='Disabled')
            self.timel.configure(text='Adjust start time for:')
        elif endonly:
            self.endonly.set(True)
            self.sdechButton.config(state=DISABLED)
            self.sdecmButton.config(state=DISABLED)
            self.sinchButton.config(state=DISABLED)
            self.sincmButton.config(state=DISABLED)
            self.slabel.configure(text='Disabled')
            self.elabel.configure(text='End')
            self.timel.configure(text='Adjust end time for:')
        else:
            self.slabel.configure(text='Start')
            self.elabel.configure(text='End')
            self.timel.configure(text='Adjust times for:')

        self.shour.set(shourin.rjust(2,'0'))
        self.smin.set(sminin.rjust(2,'0'))
        self.ehour.set(ehourin.rjust(2,'0'))
        self.emin.set(eminin.rjust(2,'0'))

        self.timead_name.set(name)
        self.timead_type.set(typeof)

    # FIXME
    def saveTime(self):
        i = int(self.timeindex.get())
        shour = self.shour.get()
        smin  = self.smin.get()
        ehour = self.ehour.get()
        emin  = self.smin.get()
        startonly = self.startonly.get()
        endonly   = self.endonly.get()

        if shour and smin and not endonly:
            if DEBUG > 0:
                print "Setting startf[" + str(i) + "] to " + str(shour) + ':' + str(smin)
            self.startf[i].set(str(shour) + ':' + str(smin))
        if ehour and emin and not startonly:
            if DEBUG > 0:
                print "Setting endf[" + str(i) + "] to " + str(ehour) + ':' + str(emin)
            self.endf[i].set(str(ehour) + ':' + str(emin))

    def ltempinc(self):
        low = int(float(self.lowtemp.get())) + 1
        self.lowtemp.set(str(low))

    def ltempdec(self):
        low = int(float(self.lowtemp.get())) - 1
        self.lowtemp.set(str(low))

    def htempinc(self):
        high = int(float(self.hightemp.get())) + 1
        self.hightemp.set(str(high))

    def htempdec(self):
        high = int(float(self.hightemp.get())) - 1
        self.hightemp.set(str(high))

    def tempAdj(self,name,lowtemp=0,hightemp=0,lowonly=False,highonly=False):
        self.tempset.lift(self.editset)

        if DEBUG > 0:
            print "tempAdj()"
            print "Name:      " + name
            print "Low Temp:  " + str(lowtemp)
            print "High Temp: " + str(hightemp)
            print "Lowonly:   " + str(lowonly)
            print "Highonly:  " + str(highonly)

        # Normalize setup
        self.lowonly.set(False)
        self.highonly.set(False)
        self.lincButton.config(state=NORMAL)
        self.ldecButton.config(state=NORMAL)
        self.hincButton.config(state=NORMAL)
        self.hdecButton.config(state=NORMAL)

        if lowonly:
            self.lowonly.set(True)
            self.hincButton.config(state=DISABLED)
            self.hdecButton.config(state=DISABLED)
            self.high_btn.configure(text='Disabled')
            self.low_btn.configure(text='Low Temp')
            self.tempal.configure(text='Adjust low temp for:')
        elif highonly:
            self.highonly.set(True)
            self.lincButton.config(state=DISABLED)
            self.ldecButton.config(state=DISABLED)
            self.high_btn.configure(text='High Temp')
            self.low_btn.configure(text='Disabled')
            self.tempal.configure(text='Adjust high temp for:')
        else:
            self.low_btn.configure(text='Low Temp')
            self.high_btn.configure(text='High Temp')
            self.tempal.configure(text='Adjust temps for:')

        #self.lowtemp.set(lowtemp.rjust(2,'0'))
        #self.hightemp.set(hightemp.rjust(2,'0'))
        self.lowtemp.set(lowtemp)
        self.hightemp.set(hightemp)

        self.tempad_name.set(name)

    # FIXME
    def saveTemp(self):
        if DEBUG > 0:
            print "saveTemp()"
        self.nlowf.set(self.lowtemp.get())
        self.nhighf.set(self.hightemp.get())

    # Show list of settings to schedule
    def confSched(self):
        global guischedule
        guischedule.read_schedule()

        self.listset.lift(self.mainframe)

        i = 2
        for schedule in guischedule.settings:
            #print schedule
            #(u'Away', 65.0, 77.0)
            #(u'Home', 67.0, 74.0)
            #(u'Night', 66.0, 75.0)
            #(u'Weekend', 66.0, 75.0)

            row = float(i * 0.1) + 0.1
            #row = float(i * 0.05) + 0.1

            name = str(itemgetter(0)(schedule))
            low  = str(itemgetter(1)(schedule))
            high = str(itemgetter(2)(schedule))

            deleteme    = partial(self.deleteSetting,name)
            overrideme  = partial(self.activateSetting,name)
            delete_button = Button(self.listset, text='Delete', command=deleteme)
            delete_button.place(relx=0.73, rely=row, height=25, width=50)

            active_button = Button(self.listset, text='Use', command=overrideme)
            #active_button.grid(row=i, rowspan=1, column=5, sticky=N)
            active_button.place(relx=0.85, rely=row, height=25, width=50)

            fgcolor = 'black'
            if len(guischedule.current) > 1:
                if name == str(itemgetter(0)(guischedule.current)):
                    active_button.config(state=DISABLED)
                    delete_button.config(state=DISABLED)
                    fgcolor = 'blue'

            namef = StringVar()
            lowf  = StringVar()
            highf = StringVar()
            namef.set(name)
            lowf.set(low)
            highf.set(high)

            name_entry = Label(self.listset, width=10, fg=fgcolor, textvariable=namef)
            name_entry.place(relx=0.05, rely=row, height=25, width=90)
            low_entry  = Label(self.listset, width=4, fg=fgcolor, textvariable=lowf)
            low_entry.place(relx=0.30, rely=row, height=25, width=50)
            high_entry = Label(self.listset, width=4, fg=fgcolor, textvariable=highf)
            high_entry.place(relx=0.45, rely=row, height=25, width=50)
            editme = partial(self.editSetting,name)
            edit_button = Button(self.listset, text='Edit', command=editme)
            edit_button.place(relx=0.60, rely=row, height=25, width=50)
            i = i + 1

        brow = i + 1
        # Until we get an on-screen keyboard, it doesn't make sense to open a dialog requiring keyboard input on a touch screen (Setting name)
        abutton = Button(self.listset, text='Add', command=self.addSetting)
        abutton.place(relx=0.3, rely=0.9, height=25, width=68)
        abutton.configure(activebackground="white")
        abutton.configure(background="black")
        abutton.configure(disabledforeground="white")
        abutton.configure(font=self.font12)
        abutton.configure(foreground="white")
        abutton.configure(highlightbackground="white")

        lowerme = partial(self.listset.lower,self.mainframe)
        cbutton = Button(self.listset, text='Close', command=lowerme)
        cbutton.configure(activebackground="white")
        cbutton.configure(background="black")
        cbutton.configure(disabledforeground="white")
        cbutton.configure(font=self.font12)
        cbutton.configure(foreground="white")
        cbutton.configure(highlightbackground="white")
        cbutton.place(relx=0.50, rely=0.9, height=25, width=68)

    def activateSetting(self,name):
        if DEBUG > 0:
            print "ACTIVATE/OVERRIDE: " + name
        res = guischedule.hold(name)
        setSched(name)
        self.schedresF.set('resume')
        self.schedres.configure(state=NORMAL)

    # Edit a named schedule setting including schedules for the setting
    def editSetting(self,name):
        global guischedule
        self.editset.lift(self.listset)

        cal_entry = Frame(self.editset)
        cal_entry.place(relx=0.02, rely=0.30, height=130, width=420)
        caldays = {'week' : ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']}
        i = 0
        self.startf = []
        self.endf = []

        for k in caldays['week']:
            #cd = Button(cal_entry,text=k,width=1,fg='black',bg='white',command=lambda j=i,k=k: self.attach_btn(k,j))
            cd = Button(cal_entry,text=k,width=1,fg='white',bg='black',command=lambda j=i,k=k: self.attach_btn(k,j))
            #cd = Button(cal_entry,text=k,width=1,fg='black',bg='gray25',command=lambda j=i,k=k: self.attach_btn(k,j))

            myschedule = guischedule.get_one_day(name,i)
            if len(myschedule) > 0:
                if itemgetter(1)(myschedule) is not None:
                    startday = int(itemgetter(1)(myschedule))
                else:
                    startday = i
                if itemgetter(2)(myschedule) is not None:
                    start    = str(itemgetter(2)(myschedule))[:5]
                else:
                    start = ''
                if itemgetter(3)(myschedule) is not None:
                    endday   = int(itemgetter(3)(myschedule))
                else:
                    endday = i
                if itemgetter(4)(myschedule) is not None:
                    end      = str(itemgetter(4)(myschedule))[:5]
                else:
                    end = ''
                self.startf.append(StringVar())
                self.endf.append(StringVar())
                self.startf[i].set(start)
                self.endf[i].set(end)

                calltimes = partial(self.timeAdj, start, end, name, 'scheduled setting',True,False, i)
                calltimee = partial(self.timeAdj, start, end, name, 'scheduled setting',False,True, i)

                if DEBUG > 0:
                    print "Setting up button for " + str(startday) + " at " + start + ", " + str(endday) + " at " + end
                if startday == i and endday == i:
                    # Starts and ends this day
                    #cd.configure(state=ACTIVE)
                    cd.configure(fg='blue')
                    cd.configure(activeforeground='blue')

                    startl = Button(cal_entry,command=calltimes,textvariable=self.startf[i],width=4,fg='green', bg='light grey').grid(row=2,column=i)
                    endl   = Button(cal_entry,command=calltimee,textvariable=self.endf[i],width=4,fg='red',bg='light grey').grid(row=3,column=i)
                elif startday == i:
                    # Starts this day
                    #cd.configure(state=ACTIVE)
                    cd.configure(fg='green')
                    cd.configure(activeforeground='green')
                    startl = Button(cal_entry,command=calltimes,textvariable=self.startf[i],width=4,fg='green',bg='light grey').grid(row=2,column=i)
                    endl   = Button(cal_entry,command=calltimee,textvariable=self.endf[i],width=4,bg='light grey').grid(row=3,column=i)
                elif endday == i:
                    # Ends this day
                    #cd.configure(state=ACTIVE)
                    cd.configure(fg='red')
                    cd.configure(activeforeground='red')
                    startl = Button(cal_entry,command=calltimes,textvariable=self.startf[i],width=4,bg='light grey').grid(row=2,column=i)
                    endl   = Button(cal_entry,command=calltimee,textvariable=self.endf[i],width=4,fg='red',bg='light grey').grid(row=3,column=i)
            else:
                # Not scheduled for this day
                self.startf.append(StringVar())
                self.endf.append(StringVar())
                self.startf[i].set('')
                self.endf[i].set('')
                calltimes = partial(self.timeAdj, '00:00', '00:00', name, 'scheduled setting',True,False, i)
                calltimee = partial(self.timeAdj, '00:00', '00:00', name, 'scheduled setting',False,True, i)
                startl = Button(cal_entry,command=calltimes,text='NA',textvariable=self.startf[i],width=4,bg='light grey').grid(row=2,column=i)
                endl   = Button(cal_entry,command=calltimee,text='NA',textvariable=self.endf[i],width=4,bg='light grey').grid(row=3,column=i)

            cd.grid(row=1,column=i,padx=5,ipadx=5,ipady=5)
            i = i + 1

        # There must be an easier way...
        editing = filter(lambda t: t[0] == name, guischedule.settings)
        res = itemgetter(0)(editing)
        self.nnamef.set(itemgetter(0)(res))
        self.nlowf.set(itemgetter(1)(res))
        self.nhighf.set(itemgetter(2)(res))

        # Temp adjustment window
        calltempl = partial(self.tempAdj, name, itemgetter(1)(res), itemgetter(2)(res), True, False)
        calltemph = partial(self.tempAdj, name, itemgetter(1)(res), itemgetter(2)(res), False, True)
        self.low_btn.configure(command=calltempl)
        self.high_btn.configure(command=calltemph)

    def attach_btn(self,k,i):
#        self.setday.append(k)
        print i
        print k
        self.startf[i].set('X')
        self.endf[i].set('X')
        print "Disabled " + k

    def deleteSetting(self,name):
        res = guischedule.del_setting(name)

    def addSetting(self):
        self.addset.lift(self.listset)

        namel = Label(self.addset,text='Setting Name', font=self.font12, bg='black', fg='white')
        namel.place(relx=0.1, rely=0.1, height=25, width=150)
        lowl  = Label(self.addset,text='Low Temp', font=self.font12, bg='black', fg='white')
        lowl.place(relx=0.5, rely=0.1, height=25, width=85)
        highl = Label(self.addset,text='High Temp', font=self.font12, bg='black', fg='white')
        highl.place(relx=0.7, rely=0.1, height=25, width=85)

        self.nnamef.set('')
        self.nlowf.set('')
        self.nhighf.set('')

        self.name_entry = Entry(self.addset, font=self.font12, textvariable=self.nnamef, text='')

        self.name_entry.place(relx=0.1, rely=0.2, height=25, width=150)
        self.low_entry  = Entry(self.addset, font=self.font12, textvariable=self.nlowf, text='')
        self.low_entry.place(relx=0.5, rely=0.2, height=25, width=85)
        self.high_entry = Entry(self.addset, font=self.font12, textvariable=self.nhighf, text='')
        self.high_entry.place(relx=0.7, rely=0.2, height=25, width=85)

        eshowkey = partial(self.popupkeyboard,1,self.nnamef)
        ebutton = Button(self.addset, text='Edit name', command=eshowkey)
        ebutton.place(relx=0.2, rely=0.3,height=25, width=68)

        shownumlow = partial(self.popupnumpad,self.nlowf)
        lbutton = Button(self.addset, text='Edit Low', command=shownumlow)
        lbutton.place(relx=0.5, rely=0.3,height=25, width=68)

        shownumhigh = partial(self.popupnumpad,self.nhighf)
        hbutton = Button(self.addset, text='Edit High', command=shownumhigh)
        hbutton.place(relx=0.7, rely=0.3,height=25, width=68)

        savenew = partial(self.saveSetting,True)
        sbutton = Button(self.addset, text='Save', command=savenew)
        sbutton.place(relx=0.4, rely=0.8, height=25, width=68)

        lowerme = partial(self.addset.lower,self.mainframe)
        cbutton = Button(self.addset, text='Close', command=lowerme)
        cbutton.place(relx=0.55, rely=0.8, height=25, width=68)

    def saveSetting(self,new):
        setting = (self.nnamef.get(),self.nlowf.get(),self.nhighf.get())

        #if new == True then it's a new one, otherwise an edit
        if new == True:
            res = guischedule.save_setting(setting,new)
        else:
            start = { 0 : [], 1 : [], 2 : [], 3 : {}, 4 : [], 5 : [], 6 : []}
            end   = { 0 : [], 1 : [], 2 : [], 3 : {}, 4 : [], 5 : [], 6 : []}

            for i in range(0,len(self.startf)):
                print self.startf[i].get()
                start[i] = self.startf[i].get()# + ':00'
            for i in range(0,len(self.endf)):
                print self.endf[i].get()
                end[i] = self.endf[i].get()# + ':00'
            #print start
            #print end
            res = guischedule.save_schedule(setting,new,start,end)

        self.editset.lower(self.mainframe)
# END thermoGUI class

if __name__ == '__main__':
    vp_start_gui()

